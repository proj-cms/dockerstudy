My docker notes :

1. Build docker file  
  docker build --tag mygivennodename:v1 .

  name of image : mygivennodename
  tab of image : v1
  Build directory that docker build should use  :  . i.e.  

2. verify the image is created 

  docker images 

3. start a coantainer with built image at port 3000 ( if posrt is exposed form image)

    docker run -d -p 3000:80 --rm --name mystartedcontaineronnodeimage:v1

    --rm  - will make sure once the container exits , it will not be listed in docker ps -a

    -d  - it will make container to run in detach mode

3.1 Start a container in  interactive mode

    docker run -it --rm --name mystartedcontaineronnodeimage

4. stop a container 

   docker stop mystartedcontaineronnodeimage

5. start a stopped container  

   docker start mystartedcontaineronnodeimage

6. start a stopped container in interactive mode 

  docker start -a -i mystartedcontaineronnodeimage

  - it will show all logs including historical logs genereted by container 


7. attach to a running container 

   docker attach mystartedcontaineronnodeimage

8. remove image 

   docker rmi mygivennodename

9. remove container container

   docker rm mystartedcontaineronnodeimage

10. cloning image with new name 

docker tag mygivennodename:v1 makddocker/my-first-docker-repo:v1

11. clearning all unused images

docker image prune

12. delete all local images

docker image prune -a 

13. The file created in container is lost when container is removed , but not when container is stopped. Restarting same container , the file can be accessed.

14. docker volume , named volume 

docker run -d -p 3000:80  --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

15. volumes currently managed by docker 

   docker volume ls
   
16. removing a volume 
   
    docker volume rm VOL_NAME

    or

    docker volume prune

17. named bind mout

docker run \
   -d \
   -p 3000:80   \
   --name feedback-app \
   -v feedback:/app/feedback \
   -v "/Users/makaranddeshpande/learnDocker/dockerstudy/docker-volume-study:/app" \
   feedback-node:volumes

docker run \  ##NOTE : separate line commands does not run with docker run
  -d \
  -p 3000:80   \
  --name feedback-app 
  -v feedback:/app/feedback   ## named volume
  -v "/Users/makaranddeshpande/learnDocker/dockerstudy/docker-volume-study:/app" \  ##Bind mount , making it docker read only
  -v /app/node_modules \    ## this is done to avoid over-writing the path of code   , anonymous volume 
  feedback-node:volumes

18.
     docker run -v /app/feedback :-> anonymous volume  , attached to container which is removed when container is rmoved , but it sustains stop-start , can not be unused   
                                     to share data across containers. 

                                     They are useful to lock in some folder/data not to make them editable.

                                     They can be created by putting path in Dockerfile as well.

     docker run -v feddback:/app/feedback :-> named volume  , can not be created in Dockerfile , but they have to be created during docker run.

                                    They can be shared across containers. They sustain container removal/start/stop.

     docker run -v <absolute-path-from-local>:/app :--> bind mount useful to reflect code directly in testing duering dev , but not useful during production.

19. 

docker run  -d  -p 3000:80 --name feedback-app   -v feedback:/app/feedback   -v "/Users/makaranddeshpande/learnDocker/dockerstudy/docker-volume-study:/app:ro" -v "/app/temp"  -v /app/node_modules feedback-node:volumes

20. environnmentvariable 

docker run  -d  -p 3001:8000 --env PORT=8000 --name feedback-app-env   -v feedback:/app/feedback   -v "/Users/makaranddeshpande/learnDocker/dockerstudy/docker-volume-study:/app:ro" -v "/app/temp"  -v /app/node_modules feedback-node:env

21. environnmentvariable through file

docker run  -d  -p 3001:8000 --env-file .env --name feedback-app-env   -v feedback:/app/feedback   -v "/Users/makaranddeshpande/learnDocker/dockerstudy/docker-volume-study:/app:ro" -v "/app/temp"  -v /app/node_modules feedback-node:env

22. ARGuments provided during building an image , but this argument is provided in Dockerfile using ARG layer.

docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000 .

23. docker image to local host communication - netwrok 

   host.docker.internal

24.
   docker container inspect <container-name>

25. docket ntwork 

 docker network create favorites-net
 docker network ls

 docker run -d --name favorites --network favorites-net --rm -p 3000:3000 favorites-node
 docker run -d --name mongodb   --network favorites-net mongo

24. 
 run mongo locally 

docker run --name mongodb --rm -d -p 27017:27017  mongo 

docker run --name goals-backend --rm -d -p 80:80 goals-node

docker run --name goals-frontend --rm -p 3000:3000 -it goals-react

docker network create goals-net

docker run --name mongodb --rm -d  --network goals-net mongo 

docker run --name goals-backend --rm -d --network goals-net -p 80:80 goals-node

docker run --name goals-frontend --rm  -it -p 3000:3000 goals-react

---- running with volume now fo data persistence ----
docker run --name mongodb -v data:/data/db --rm -d --network goals-net  mongo 

docker run --name mongodb -d --rm -v data:/data/db   --network goals-net  -e MONGO_INITDB_ROOT_USERNAME=max -e MONGO_INITDB_ROOT_PASSWORD=secret mongo 

docker run --name goals-backend --rm --network goals-net -p 80:80 goals-node

-e MONGO_INITDB_ROOT_USERNAME=max -e MONGO_INITDB_ROOT_PASSWORD=secret

=========================
docker run --name mongodb -v data:/data/db --rm -d --network goals-net  mongo 

docker run  --name goals-backend  --rm -d   -v logs:/app/logs -v "/Users/makaranddeshpande/learnDocker/dockerstudy/multi-02-finished/backend":/app -v /app/node_modules --network goals-net -p 80:80  goals-node

working image runs as of 16 Oct 2021

mongo: docker run --name mongodb -v data:/data/db --rm -d --network goals-net  mongo

golas-backend : docker run  --name goals-backend  --rm -d   -v logs:/app/logs -v "/Users/makaranddeshpande/learnDocker/dockerstudy/multi-02-finished/backend":/app -v /app/node_modules --network goals-net -p 80:80  goals-node



25. Different ways of running commands 


docker run -it -v /Users/makaranddeshpande/learnDocker/dockerstudy/utility-contianers:/app node-util npm init


with entry point in docker file 

docker run -it -v /Users/makaranddeshpande/learnDocker/dockerstudy/utility-contianers:/app node-util  init

dcoker-compose up -d

docker-compose down -v

docker-compose --rm run <service-name-from-yaml> 

docker-compose run --rm composer create-project --prefer-dist laravel/laravel .

docker-compose up -d server php mysql

docker-compose up -d --build server